#####################################################################
# nDisplay config file
#
# This nDisplay config file is intended for UCLA REMAP
#
# Date edited: 01/19/2021
#####################################################################

#####################################################################
# Properties:
# version - Specifies the version of the configuration file (UE4.xx)
#********************************************************************
[info] version="23"

#####################################################################
# Cluster nodes
#********************************************************************
# Cluster node is an application instance. It's allowed to use
# multiple instances on the same PC. Sometimes its necessary. Usually
# application instances run on separate machines.
#********************************************************************
[cluster_node] id="node_1" addr="131.179.142.12" window="wnd_1" master="true" sound="false"
 


#####################################################################
# Application windows
#********************************************************************
# The window entity defines properties of the application's game window.
#********************************************************************
#[window] id="wnd_1" WinX=0 WinY=0 ResX=9600 ResY=2160 viewports="vp_1, vp_2, vp_3, rtt_inner"  fullscreen="false"
#[window] id="wnd_1" WinX=0 WinY=0 ResX=1280 ResY=768 viewports="vp_1, vp_2, vp_3, rtt_inner"  fullscreen="false"
[window] id="wnd_1" WinX=0 WinY=0 ResX=5760 ResY=1080 viewports="vp_1, vp_2, vp_3, rtt_inner"  fullscreen="false"


#####################################################################
# Viewports
#********************************************************************
# Viewport is a rectangle area of game window where a frame is mapped.
# Usually viewports start at 0:0 and have the same size as its parent
# window (single viewport rendering). However, in some cases multiple
# viewports required.k
#********************************************************************
[viewport] id="vp_1" x="0" y="0" width="1280" height="768" projection="proj_1"
[viewport] id="rtt_inner"  x="0" y="1920" width="480" height="270" projection="proj_camera1" rtt=true
[viewport] id="vp_2"  x="1920" y="0" width="1920" height="1080" projection="proj_2"  
[viewport] id="vp_3"  x="3840" y="0" width="1920" height="1080" projection="proj_3" 


#####################################################################
# Projection policies
#********************************************************************
# Projection policy is an abstraction which knows where to take an
# projection input data and how to compute the output. This means
# that each policy might have it's own properties that it knows how
# to interpret and utilize. There are several projection policies
# available natively: simple, MPCDI and EasyBlend:
#********************************************************************
#[projection] id="proj_1" type="picp_mesh" scale=1  screen="scr_1"
[projection] id="proj_camera1" type="camera"
[projection] id="proj_1" type="picp_mesh" screen="scr_1" scale=1
[projection] id="proj_2" type="picp_mesh" screen="scr_2" scale=1
[projection] id="proj_3" type="picp_mesh" screen="scr_3" scale=1

#####################################################################
# Projection screens
#********************************************************************
# Projection screen is a rectangle which determines the camera frustum.
# Usually the projection screen has the same dimensions as an output
# display but in some cases it may differ. Used by simple projection
# policy.
#********************************************************************
[screen] id="scr_1" loc="X=1.7,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=4.572,Y=3.048" parent="screens"
#[screen] id="scr_2" loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=.52,Y=.29" parent="display_1"
[screen] id="scr_2" loc="X=-1,Y=-0.7,Z=0" rot="P=0,Y=0,R=0" size="X=1.219,Y=0.686" parent="screens"
[screen] id="scr_3" loc="X=-1,Y=0.7,Z=0" rot="P=0,Y=0,R=0" size="X=1.219,Y=0.686" parent="screens"


#####################################################################
# Cameras
#********************************************************************
# Camera is a predefined point frome where the stereoscopic view built.
# It's possible to define multiple cameras and swith the active one
# during runtime. You're free to attach any camera to a tracking device
# for head tracking. Consider a camera as a viewer's head.
#[camera] id="camera_outer" loc="X=0,Y=0,Z=0" parent="socket_cam"
[camera] id="proj_camera1" loc="X=0,Y=0,Z=0" parent="rtt_inner"

#####################################################################
# Scene nodes (hierarchy transforms)
#********************************************************************
# Scene node is an actor component which is basically a transformation
# matrix. Scene nodes can be helpful to build a component hierarchy, to
# define some special places (like a socket) within VR space.
#********************************************************************
[scene_node] id=stage_origin  loc="X=0,Y=0,Z=0"   rot="P=0,Y=0,R=0"
[scene_node] id="cave_origin" loc="X=0,Y=0,Z=0"   rot="P=0,Y=0,R=0"
[scene_node] id="screens"     loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0"  parent="cave_origin"


#####################################################################
# General settings
#********************************************************************
# Properties:
# swap_sync_policy - swap synchronization policy
#                  - 0 - no synchronization
#                  - 1 - software swap synchronization
#                  - 2 - NV swap lock (Nvidia cards only, OpenGL only)
[general] swap_sync_policy="1"

#####################################################################
# Network settings
#********************************************************************
# Optional properties:
# cln_conn_tries_amount - how many times a client tries to connect to a server; default is 10
# cln_conn_retry_delay  - delay before next client connection try (milliseconds); default is 1000
# game_start_timeout    - timeout before all data is loaded and game started (milliseconds); default is 30000
# barrier_wait_timeout  - barrier timeout for both game and render threads (milliseconds); default is 5000
[network] cln_conn_tries_amount="10" cln_conn_retry_delay="1000" game_start_timeout="30000" barrier_wait_timeout="5000"


